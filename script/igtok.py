import base64

encoded_data=
b'CmltcG9ydCByZXF1ZXN0cwppbXBvcnQgcmFuZG9tCmZyb20gZ2V0dXNlcmFnZW50IGltcG9ydCBVc2VyQWdlbnQKWSA9ICcbWzkybScKUyA9ICcbWzkzbScKSyA9ICcbWzkxbScKTSA9JxtbOTRtJwpFID0gJxtbMG0nClAgPSAnG1s5NW0nCnByaW50KCcbWzE7MzJtICBfX19fX19fX19fX18KG1sxOzMybSAg4pWR4paS4paS4paS4paS4paS4paS4paS4paS4paS4paS4pWRChtbMTszMm0gIOKVkeKWkuKWkuKWkuKWkuKWkuKWkuKWkuKWkuKWkuKWkuKVkQobWzE7MzJtICDilZHilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilZEbWzE7MzNtChtbMTszMm0g4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXG1sxOzMzbQobWzE7MzJtIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnRtbMTszM20KG1sxOzMxbSAg4pWRG1sxOzM2beKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiBtbMTszMW3ilZrilZcbWzE7MzNtChtbMTszMW0gIOKVkRtbMTszNm3ilojilogbWzE7MzFt4pWU4pWQ4pWQ4pWXG1sxOzM2beKWiBtbMTszMW3ilZTilZDilZcbWzE7MzZt4paIG1sxOzMxbeKVkRtbMTszM20KG1sxOzMxbSAg4pWRG1sxOzM2beKWiOKWiBtbMTszMW3ilZEbWzE7MzNt4pWsG1sxOzMxbeKVlOKVnRtbMTszNm3ilogbWzE7MzFt4pWa4pWX4pWRG1sxOzM2beKWiBtbMTszMW3ilZEbWzE7MzNtChtbMTszMW0gIOKVkRtbMTszNm3ilojilogbWzE7MzFt4pWa4pWQ4pWdG1sxOzM2beKWiBtbMTszMW3ilZEbWzE7MzZt4paIG1sxOzMxbeKVmuKVnRtbMTszNm3ilogbWzE7MzFt4pWRG1swbSBUaGUKG1sxOzMxbSAg4pWa4pWXG1sxOzM2beKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiBtbMTszMW3ilZDilZ0gG1swbUJlc3QKG1sxOzMxbSAgIOKVmuKVl+KVkeKVoOKVqeKVqeKVqeKVqeKVqeKVnSAgIBtbMG0bWzE7OTVtChtbMTszMW0gICAg4pWR4pWR4pWa4pWXG1sxOzMzbeKUiBtbMTszNG3ilojilpDilojilojilojilojilogbWzE7MzFt4paSG1swbS7vvaFvTwobWzE7MzFtICAgIOKVkRtbMTszNm3ilojilogbWzE7MzFt4pWg4pWm4pWm4pWm4pWXChtbMTszMW0gICAg4pWa4pWXG1sxOzM2beKWiOKWiOKWiOKWiOKWiOKWiCAbWzBtRGV2ZWxvcGVyIBtbMTszMW06IBtbNDg7NTswOzM4OzU7MTk3bVZlcmEKG1sxOzMxbSAgICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWdICAbWzBtVG9vbCAbWzE7MzFtOiAbWzE7OTJtxLBHIEzEsEtFICsgG1sxOzk3bVTEsEtUT0sgVsSwRVdTIBtbMTs5MW0KIBtbMTszM2084pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQPgobWzE7MzFtCgobWzE7OTdtxLBuc3RhG1sxOzk1bSBWZXJhaWxkZXoKJykKZGVmIGluc3RhZ3JhbV9iZWdlbmkoKToKICAgIHVhID0gVXNlckFnZW50KCJpb3MiKS5SYW5kb20oKQogICAgdXNlciA9IGlucHV0KE0rJ3zinJN8IMSwbnN0YWdyYW0gS3VsbGFuxLFjxLEgQWTEsSBHaXI6ICcrUykKICAgIGxpbmsgPSBpbnB1dChNKyd84pyTfCBHw7ZuZGVyaSBMaW5raSA6ICcrUykKICAgIHJlcyA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLmxpa2VzamV0LmNvbS9mcmVlYm9vc3QvNycsCiAgICAgICAgICAgICAgICAgICAgICAgIGpzb249eyJpbnN0YWdyYW1fdXNlcm5hbWUiOiB1c2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGluayI6IGxpbmssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJlbWFpbCI6IGYid2hpc3BlcntyYW5kb20ucmFuZGludCgxMDAwMDAsOTk5OTk5KX1AZ21haWwuY29tIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9eyJIb3N0IjogImFwaS5saWtlc2pldC5jb20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudC1sZW5ndGgiOiAiMTM3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1jaC11YSI6ICIiR29vZ2xlIENocm9tZSI7dj0iMTE5IiwgIkNocm9taXVtIjt2PSIxMTkiLCAiTm90P0FfQnJhbmQiO3Y9IjI0IiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1jaC11YS1tb2JpbGUiOiAiPzEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXNlci1hZ2VudCI6IHVhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2VjLWNoLXVhLXBsYXRmb3JtIjogIiJBbmRyb2lkIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJvcmlnaW4iOiAiaHR0cHM6Ly9saWtlc2pldC5jb20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXNpdGUiOiAic2FtZS1zaXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1tb2RlIjogImNvcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLWRlc3QiOiAiZW1wdHkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVmZXJlciI6ICJodHRwczovL2xpa2VzamV0LmNvbS8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjogImVuLVhBLGVuO3E9MC45LGFyLVhCO3E9MC44LGFyO3E9MC43LGVuLUdCO3E9MC42LGVuLVVTO3E9MC41In0pCgogICAgaWYgcmVzLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICBwcmludChZKyJCZcSfZW5pbGVyIEfDtm5kZXJpbGRpIitFKQogICAgZWxzZToKICAgICAgICBwcmludChLKyJIYXRhIG9sdcWfdHUsIGJlxJ9lbmlsZXIgZ8O2bmRlcmlsZW1lZGkuIitFKQoKZGVmIHRpa3Rva19nb3J1bnR1bGVubWUoKToKICAgIHVhID0gVXNlckFnZW50KCJpb3MiKS5SYW5kb20oKQogICAgdXNlciA9IGlucHV0KE0rJ3zinJN8IFRpa1RvayBLdWxsYW7EsWPEsSBBZMSxbsSxIEdpciA6ICcrUykKICAgIGxpbmsgPSBpbnB1dChNKyd84pyTfCBWaWRlb251biBMaW5raW5pIEdpciA6ICcrUykKCiAgICByZXMgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2FwaS5saWtlc2pldC5jb20vZnJlZWJvb3N0LzMnLAogICAgICAgICAgICAgICAgICAgICAgICBqc29uPXsibGluayI6IGxpbmssCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aWt0b2tfdXNlcm5hbWUiOiB1c2VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZW1haWwiOiBmIndoaXNwZXJ7cmFuZG9tLnJhbmRpbnQoMTAwMDAwLDk5OTk5OSl9QGdtYWlsLmNvbSJ9LAogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsiSG9zdCI6ICJhcGkubGlrZXNqZXQuY29tIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtbGVuZ3RoIjogIjEzNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzZWMtY2gtdWEiOiAiIkdvb2dsZSBDaHJvbWUiO3Y9IjExOSIsICJDaHJvbWl1bSI7dj0iMTE5IiwgIk5vdD9BX0JyYW5kIjt2PSIyNCIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzZWMtY2gtdWEtbW9iaWxlIjogIj8xIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVzZXItYWdlbnQiOiB1YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1jaC11YS1wbGF0Zm9ybSI6ICIiQW5kcm9pZCIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAib3JpZ2luIjogImh0dHBzOi8vbGlrZXNqZXQuY29tIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1zaXRlIjogInNhbWUtc2l0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ICJjb3JzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjogImVtcHR5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiAiaHR0cHM6Ly9saWtlc2pldC5jb20vIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1sYW5ndWFnZSI6ICJlbi1YQSxlbjtxPTAuOSxhci1YQjtxPTAuOCxhcjtxPTAuNyxlbi1HQjtxPTAuNixlbi1VUztxPTAuNSJ9KQoKICAgIGlmIHJlcy5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgcHJpbnQoWSsiR8O2csO8bnTDvGxlbm1lIEfDtm5kZXJpbGRpISIrRSkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoSysiSGF0YSBvbHXFn3R1LCBnw7Zyw7xudMO8bGVubWVsZXIgZ8O2bmRlcmlsZW1lZGkuIitFKQoKY2hvaWNlID0gaW5wdXQoZiJ7UH3vvJHvvI3vvIkg77yp772O772T772U772B772H772S772B772NIO+8ou+9hcSf772F772O772JCu+8ku+8je+8iSDvvLTvvYnvvYvvvLTvvY/vvYsg77ynw7bvvZLDvO+9ju+9lMO8772M772F772O772N772FCgp7TX3EsMWeTEVNIFNFw4coMSAtIDIp77yaICIrUykKCmlmIGNob2ljZSA9PSAiMSI6CiAgICBpbnN0YWdyYW1fYmVnZW5pKCkKZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgdGlrdG9rX2dvcnVudHVsZW5tZSgpCmVsc2U6CiAgICBwcmludChLKyJHZcOnZXJzaXogc2XDp2ltISIrRSkK

decoded_data = base64.b64decode(encoded_data)
 
exec(decoded_data)
